import networkx as nx
import matplotlib.pyplot as plt
from tabulate import tabulate
from colorama import init, Fore

# Ініціалізація colorama для автоматичного скидання кольору
init(autoreset=True)


def build_graph():
    """
    Функція для побудови орієнтованого графа, який моделює логістичну мережу.
    Граф містить термінали, склади та магазини як вузли, а також потоки товарів між ними як ребра з заданими місткостями.

    Returns:
        G (networkx.DiGraph): Орієнтований граф з терміналами, складами та магазинами.
    """
    G = nx.DiGraph()

    # Ребра графа з відповідними місткостями
    edges = [
        ("Термінал 1", "Склад 1", 25),
        ("Термінал 1", "Склад 2", 20),
        ("Термінал 1", "Склад 3", 15),
        ("Термінал 2", "Склад 3", 15),
        ("Термінал 2", "Склад 4", 30),
        ("Термінал 2", "Склад 2", 10),
        ("Склад 1", "Магазин 1", 15),
        ("Склад 1", "Магазин 2", 10),
        ("Склад 1", "Магазин 3", 20),
        ("Склад 2", "Магазин 4", 15),
        ("Склад 2", "Магазин 5", 10),
        ("Склад 2", "Магазин 6", 25),
        ("Склад 3", "Магазин 7", 20),
        ("Склад 3", "Магазин 8", 15),
        ("Склад 3", "Магазин 9", 10),
        ("Склад 4", "Магазин 10", 20),
        ("Склад 4", "Магазин 11", 10),
        ("Склад 4", "Магазин 12", 15),
        ("Склад 4", "Магазин 13", 5),
        ("Склад 4", "Магазин 14", 10),
    ]

    # Додавання ребер з місткостями в граф
    for u, v, capacity in edges:
        G.add_edge(u, v, capacity=capacity)

    return G


def calculate_max_flow(G, source, sink):
    """
    Функція для обчислення максимального потоку в орієнтованому графі між вказаними джерелом та стоком.

    Parameters:
        G (networkx.DiGraph): Орієнтований граф з ребрами з місткостями.
        source (str): Вершина джерела (термінал).
        sink (str): Вершина стоку (магазин).

    Returns:
        flow_value (int): Значення максимального потоку між джерелом і стоком.
        flow_dict (dict): Словник, що містить розподіл потоків між вузлами.
    """
    return nx.maximum_flow(G, source, sink)


def visualize_graph(G):
    """
    Функція для візуалізації орієнтованого графа за допомогою бібліотеки matplotlib.
    Граф відображає термінали, склади та магазини з потужністю потоків між ними.

    Parameters:
        G (networkx.DiGraph): Орієнтований граф з ребрами з місткостями.
    """
    pos = nx.spring_layout(G, seed=42)  # Позиціонування вузлів графа
    labels = nx.get_edge_attributes(G, "capacity")  # Місткості на ребрах

    # Створення візуалізації графа
    plt.figure(figsize=(10, 6))
    nx.draw(
        G,
        pos,
        with_labels=True,
        node_size=3000,
        node_color="lightblue",
        edge_color="gray",
        font_size=10,
    )
    nx.draw_networkx_edge_labels(G, pos, edge_labels=labels)

    plt.title("Граф логістичної мережі")
    plt.show()


def main():
    """
    Основна функція, яка будує граф, обчислює максимальні потоки між терміналами та магазинами,
    виводить результати в табличному вигляді та візуалізує граф.
    """
    G = build_graph()

    # Список джерел та стоків
    sources = ["Термінал 1", "Термінал 2"]
    sinks = [
        "Магазин 1",
        "Магазин 2",
        "Магазин 3",
        "Магазин 4",
        "Магазин 5",
        "Магазин 6",
        "Магазин 7",
        "Магазин 8",
        "Магазин 9",
        "Магазин 10",
        "Магазин 11",
        "Магазин 12",
        "Магазин 13",
        "Магазин 14",
    ]

    # Змінні для підрахунку максимального потоку
    max_flow_value = 0
    final_flow = {}

    # Обчислення максимальних потоків між кожним терміналом і магазином
    for source in sources:
        for sink in sinks:
            flow_value, flow_dict = calculate_max_flow(G, source, sink)
            max_flow_value += flow_value
            final_flow[(source, sink)] = flow_value

    # Виведення результату максимального потоку
    print(Fore.GREEN + f"\nМаксимальний потік у мережі: {max_flow_value}")

    # Формування таблиці розподілу потоків
    table_data = [
        [src, sink, flow] for (src, sink), flow in final_flow.items() if flow > 0
    ]
    print(Fore.CYAN + "\nТаблиця розподілу потоків:")
    print(
        tabulate(
            table_data,
            headers=["Термінал", "Магазин", "Фактичний Потік (одиниць)"],
            tablefmt="grid",
        )
    )

    # Візуалізація графа
    visualize_graph(G)


if __name__ == "__main__":
    main()
